filter {
  if [type] == "dns" or [type] == "bro_dns" {
    # Used for whois lookups - can create log loop
    if [query] =~ "^whois\." {
      drop { }
    }
    # REPLACE test.int with your internal domain
    if [query] and [query] !~ "\.gocolumbiamo\.com$" {
      mutate {
        lowercase => [ "query" ]
      }
      if [query_type_name] != "NB" and [query_type_name] != "TKEY" and [query_type_name] != "NBSTAT" and [query_type_name] != "PTR" {
        tld {
          source => "query"
        }
        ruby {
          #@XXX  code => "event['query_length'] = event['query'].length"
          code => "event.set('query_length', event.get('query').length)"
        }
        mutate {
          rename => { "[SubLog][sessionid]" => "sub_session_id" }
          rename => { "[tld][domain]" => "highest_registered_domain" }
          rename => { "[tld][trd]" => "subdomain" }
          rename => { "[tld][tld]" => "top_level_domain" }
          rename => { "[tld][sld]" => "parent_domain" }
        }
        if [parent_domain] {
          ruby {
            #@XXX code => "event['parent_domain_length'] = event['parent_domain'].length"
            code => "event.set('parent_domain_length', event.get('parent_domain').length)"
          }
        }
        if [subdomain] {
          ruby {
            #@XXX  code => "event['subdomain_length'] = event['subdomain'].length"
            code => "event.set('subdomain_length', event.get('subdomain').length)"
          }
        }
      }
    }
	mutate {
		#add_tag => [ "conf_file_8006"]
	}
  }
}
