input {
  beats {
    port => 5044
  }
}

filter {
  grok {
    match => { 
      "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" 
    }
  }
  if [source] =~ "ufw" {
    grok {
      match => {
        "syslog_message" => "\[(\s+)?(?<uptime>[0-9]+\.[0-9]+)\]\s\[UFW BLOCK\]\s%{GREEDYDATA:ufw_message}"
      }
      remove_field => [ "syslog_message" ]
    }
    mutate {
      gsub => [ "ufw_message", "= ", "=NA ",
                "ufw_message", "SYN URGP", "URGP" ]
    }
    kv {
      source => "ufw_message"
      remove_field => [ "ufw_message" ]
      
    }
    mutate {
      rename => [ "DPT", "destination_port" ]
      rename => [ "DST", "destination_ip" ]
      rename => [ "ID", "id" ]
      rename => [ "IN", "inbound_interface" ]
      rename => [ "LEN", "packet_length" ]
      rename => [ "MAC", "mac_address" ]
      rename => [ "OUT", "outbound_interface" ]
      rename => [ "PREC", "precedence" ]
      rename => [ "PROTO", "protocol" ]
      rename => [ "RES", "reserved" ]
      rename => [ "SPT", "source_port" ]
      rename => [ "SRC", "source_ip" ]
      rename => [ "TOS", "type_of_service" ]
      rename => [ "TTL", "time_to_live" ]
      rename => [ "URGP", "syn_urgent_flag" ]
      rename => [ "WINDOW", "windows_size" ]
      convert => [ "destination_port", "integer" ] 
      convert => [ "packet_length", "integer" ] 
      convert => [ "source_port", "integer" ] 
      convert => [ "time_to_live", "integer" ] 
      convert => [ "uptime", "float" ] 
      convert => [ "windows_size", "integer" ] 
    }
  }
  date {
    match => [ "syslog_timestamp", "MMM dd yyyy HH:mm:ss","MMM  d yyyy HH:mm:ss", "MMM  d HH:mm:ss", "MMM d HH:mm:ss" ]
    remove_field => [ "syslog_timestamp" ]
  }
  syslog_pri { }
  if [syslog_message] =~ "Failed password for" {
    grok {
      match => {
        "syslog_message" => "Failed password for %{USER:user} from %{IPV4:source_ip} port %{INT:source_port:int} %{WORD:auth_program}"
      }
    }
    mutate {
      add_tag => [ "logon_failure" ]
    }
  }
  grok {
    match => {
      "syslog_message" => "Accepted password for %{USER:user} from %{IPV4:source_ip} port %{INT:source_port:int} %{WORD:auth_program}"
    }
    add_tag => [ "logon_success" ]
    tag_on_failure => []
  }
  geoip {
    source => "source_ip"
  }
  geoip {
    database => "/usr/local/share/GeoIP/GeoIPASNum.dat"
    source => "source_ip"
  }
}

output {
  elasticsearch {
    index => "lab1.1-aggregator_only"
  }
}
